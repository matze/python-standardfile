#!/usr/bin/python

import os
import argparse
import logging
import stat
import time
import datetime
import json
import standardfile.models as sfm
from fuse import FUSE, FuseOSError, Operations, LoggingMixIn
from errno import ENOENT


EPOCH = datetime.datetime(1970, 1, 1)


class StandardFile(LoggingMixIn, Operations):
    def __init__(self, key):
        def legal(c):
            return c.isalpha() or c.isdigit() or c == ' ' or c == '.'

        def sanitize(s):
            return "".join([c for c in s if legal(c)]).rstrip()

        data = json.load(open('dump.json'))
        items = [sfm.load(x, key) for x in data['items']]
        self.notes = {sanitize(x.title) + '.md': x for x in items if isinstance(x, sfm.Note)}
        self.tags = {sanitize(x.title): x for x in items if isinstance(x, sfm.Tag)}
        self.fds = {}
        self.attrs = {}
        self.uid = os.getuid()
        self.gid = os.getgid()

    def get_note(self, path):
        name = unicode(os.path.basename(path))

        if not name in self.notes:
            raise FuseOSError(ENOENT)

        return self.notes[name]

    def readdir(self, path, fh):
        if path == '/':
            return ['.', '..', 'tags', 'notes']
        elif path == '/notes':
            return ['.', '..'] + self.notes.keys()
        elif path == '/tags':
            return ['.', '..'] + self.tags.keys()

    def getattr(self, path, fh=None):
        if path.startswith('/notes/'):
            note = self.get_note(path)
            mode = stat.S_IFREG | 0o600
            mtime = atime = (note.updated_at - EPOCH).total_seconds()
            ctime = (note.created_at - EPOCH).total_seconds()
            size = len(note.text)
            return dict(st_mode=mode, st_ctime=ctime, st_mtime=mtime,
                        st_atime=atime, st_nlink=2, st_size=size,
                        st_uid=self.uid, st_gid=self.gid)
        else:
            now = time.time()
            mode = stat.S_IFDIR | 0o700
            return dict(st_mode=mode, st_ctime=now, st_mtime=now,
                        st_atime=now, st_nlink=2,
                        st_uid=self.uid, st_gid=self.gid)

    def getxattr(self, path, name, position=0):
        attrs = self.attrs.get(path, {})
        return attrs.get(name, '')

    def listxattr(self, path):
        attrs = self.attrs.get(path, {})
        return attrs.keys()

    def setxattr(self, path, name, value, options, position=0):
        attrs = self.attrs.setdefault(path, {})
        attrs[name] = value

    def open(self, path, flags):
        fds = self.fds.keys()
        fd = 0 if not fds else max(fds) + 1
        self.fds[fd] = self.get_note(path)
        return fd

    def read(self, path, size, offset, fd):
        note = self.fds[fd]
        length = len(note.text)

        if offset > length:
            return ''

        return note.text[offset:min(length - offset, offset + size)]

    def write(self, path, data, offset, fd):
        note = self.fds[fd]
        text = note.text
        text[:offset] + data
        note.text = text
        return len(data)

    def truncate(self, path, length, fd=None):
        note = self.fds[fd]
        note.text = note.text[:length]

    def release(self, path, fd):
        del self.fds[fd]

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--key', metavar='MASTER', type=str, required=True)
    parser.add_argument('mountpoint', type=str)
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG)
    fuse = FUSE(StandardFile(args.key), args.mountpoint, nothreads=True, foreground=True)
