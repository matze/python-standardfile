#!/usr/bin/python

import os
import argparse
import logging
import stat
import time
import datetime
import json
import standardfile.models as sfm
from fuse import FUSE, FuseOSError, Operations, LoggingMixIn
from errno import ENOENT


EPOCH = datetime.datetime(1970, 1, 1)


def sanitize(s):
    def legal(c):
        return c.isalpha() or c.isdigit() or c == ' ' or c == '.'

    return "".join([c for c in s if legal(c)]).rstrip()


def get_path_elements(path):
    return [x for x in path.split('/') if x]


class StandardFile(LoggingMixIn, Operations):
    def __init__(self, key):

        data = json.load(open('dump.json'))
        self.collection = sfm.Collection([sfm.load(x, key) for x in data['items']])
        self.fds = {}
        self.attrs = {}
        self.uid = os.getuid()
        self.gid = os.getgid()

    def get_note(self, name):
        matches = [x for x in self.collection.notes if sanitize(x.title) == name]

        if not matches:
            raise FuseOSError(ENOENT)

        return matches[0]

    def readdir(self, path, fh):
        if path == '/':
            return ['.', '..'] + [t.title for t in self.collection.tags]

        tag = self.collection.tag_matching(path[1:])
        return ['.', '..'] + [sanitize(n.title) for n in self.collection.refs_for(tag)]

    def getattr(self, path, fh=None):
        elements = get_path_elements(path)

        if len(elements) <= 1:
            now = time.time()
            mode = stat.S_IFDIR | 0o700
            return dict(st_mode=mode, st_ctime=now, st_mtime=now,
                        st_atime=now, st_nlink=2,
                        st_uid=self.uid, st_gid=self.gid)
        else:
            note = self.get_note(elements[1])
            mode = stat.S_IFREG | 0o600
            mtime = atime = (note.updated_at - EPOCH).total_seconds()
            ctime = (note.created_at - EPOCH).total_seconds()
            size = len(note.text)
            return dict(st_mode=mode, st_ctime=ctime, st_mtime=mtime,
                    st_atime=atime, st_nlink=2, st_size=size,
                    st_uid=self.uid, st_gid=self.gid)

    def getxattr(self, path, name, position=0):
        attrs = self.attrs.get(path, {})
        return attrs.get(name, '')

    def listxattr(self, path):
        attrs = self.attrs.get(path, {})
        return attrs.keys()

    def setxattr(self, path, name, value, options, position=0):
        attrs = self.attrs.setdefault(path, {})
        attrs[name] = value

    def open(self, path, flags):
        fds = self.fds.keys()
        fd = 0 if not fds else max(fds) + 1
        elements = get_path_elements(path)
        self.fds[fd] = self.get_note(elements[1])
        return fd

    def read(self, path, size, offset, fd):
        note = self.fds[fd]
        length = len(note.text)

        if offset > length:
            return ''

        return note.text[offset:min(length - offset, offset + size)]

    def write(self, path, data, offset, fd):
        note = self.fds[fd]
        text = note.text
        text[:offset] + data
        note.text = text
        return len(data)

    def truncate(self, path, length, fd=None):
        note = self.fds[fd]
        note.text = note.text[:length]

    def release(self, path, fd):
        del self.fds[fd]

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--key', metavar='MASTER', type=str, required=True)
    parser.add_argument('mountpoint', type=str)
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG)
    fuse = FUSE(StandardFile(args.key), args.mountpoint, nothreads=True, foreground=True)
